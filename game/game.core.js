// Generated by CoffeeScript 1.6.2
(function() {
  var GameCore;

  GameCore = (function() {
    function GameCore() {
      this.canvasWidth = 780;
      this.canvasHeight = 440;
      this.xOffset = 20;
      this.racketHeight = 55;
      this.racketWidth = 10;
      this.ballSize = 8;
      this.racketV = 0.15;
      this.dirUp = -1;
      this.dirIdle = 0;
      this.dirDown = 1;
      this.gs = [
        {
          pos: 10,
          dir: this.dirIdle,
          updates: []
        }, {
          pos: 10,
          dir: this.dirIdle,
          updates: []
        }
      ];
      this.ball = {
        pos: {
          x: this.canvasWidth / 2 - this.ballSize / 2,
          y: this.canvasHeight / 2 - this.ballSize / 2
        },
        angle: (20 + Math.random() * 50) * Math.PI / 180,
        v: 0.2
      };
      this.updateTime = null;
      this.dt = 20;
      this.lastProcessedSeq = -1;
    }

    GameCore.prototype.time = function() {
      return new Date().getTime();
    };

    GameCore.prototype.moveRacket = function(dir, dirUpdates, pos, currentTime, lastTime) {
      var upd, _i, _len;

      for (_i = 0, _len = dirUpdates.length; _i < _len; _i++) {
        upd = dirUpdates[_i];
        if (upd.t <= lastTime || upd.t > currentTime) {
          continue;
        }
        pos = this.moveRacketBit(pos, dir, upd.t - lastTime);
        lastTime = upd.t;
        dir = upd.dir;
        this.lastProcessedSeq = upd.seq;
      }
      return this.moveRacketBit(pos, dir, currentTime - lastTime);
    };

    GameCore.prototype.moveRacketBit = function(pos, dir, dt) {
      var newPos;

      newPos = dir === this.dirUp ? pos - this.racketV * dt : dir === this.dirDown ? pos + this.racketV * dt : pos;
      if (newPos < 0) {
        newPos = 0;
      }
      if (newPos > this.canvasHeight - this.racketHeight) {
        newPos = this.canvasHeight - this.racketHeight;
      }
      return newPos;
    };

    GameCore.prototype.moveBall = function(dt) {
      var ds;

      ds = this.ball.v * dt;
      this.ball.pos.x += ds * Math.cos(this.ball.angle);
      this.ball.pos.y += ds * Math.sin(this.ball.angle);
      return this.checkBallCollision();
    };

    GameCore.prototype.checkBallCollision = function() {
      if (this.ball.pos.y < 0) {
        this.ball.pos.y = 0;
        this.ball.angle = -this.ball.angle;
        return;
      }
      if (this.ball.pos.y > this.canvasHeight - this.ballSize) {
        this.ball.pos.y = this.canvasHeight - this.ballSize;
        this.ball.angle = -this.ball.angle;
        return;
      }
      if (this.ball.pos.x <= this.xOffset) {
        if (this.ball.pos.y >= this.gs[0].pos && this.ball.pos.y <= this.gs[0].pos + this.racketHeight - this.ballSize) {
          this.ball.pos.x = this.xOffset;
          this.ball.angle = Math.PI - this.ball.angle;
          return;
        }
      }
      if (this.ball.pos.x >= this.canvasWidth - this.xOffset - this.ballSize) {
        if (this.ball.pos.y >= this.gs[1].pos && this.ball.pos.y <= this.gs[1].pos + this.racketHeight - this.ballSize) {
          this.ball.pos.x = this.canvasWidth - this.xOffset - this.ballSize;
          this.ball.angle = Math.PI - this.ball.angle;
        }
      }
    };

    return GameCore;

  })();

  if (typeof module === 'undefined') {
    window.GameCore = GameCore;
  } else {
    module.exports = GameCore;
  }

}).call(this);
